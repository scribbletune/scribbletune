{"version":3,"sources":["webpack://scribble/webpack/universalModuleDefinition","webpack://scribble/webpack/bootstrap","webpack://scribble/./src/utils.ts","webpack://scribble/./src/chord.ts","webpack://scribble/./src/scale.ts","webpack://scribble/./src/clip.ts","webpack://scribble/./node_modules/jsmidgen/lib/jsmidgen.js","webpack://scribble/./node_modules/tonal-note/build/es6.js","webpack://scribble/./node_modules/tonal-array/build/es6.js","webpack://scribble/./node_modules/tonal-interval/build/es6.js","webpack://scribble/./node_modules/tonal-distance/build/es6.js","webpack://scribble/./node_modules/tonal-pcset/build/es6.js","webpack://scribble/./node_modules/tonal-dictionary/build/es6.js","webpack://scribble/./node_modules/tonal-scale/build/es6.js","webpack://scribble/./node_modules/tonal-chord/build/es6.js","webpack://scribble/./node_modules/tonal/index.js","webpack://scribble/./src/index.ts","webpack://scribble/./src/browserClip.ts","webpack://scribble/./src/progression.ts","webpack://scribble/./src/arp.ts","webpack://scribble/./src/midi.ts","webpack://scribble/external \"fs\"","webpack://scribble/(webpack)/buildin/module.js","webpack://scribble/./src/session.ts","webpack://scribble/./src/channel.ts","webpack://scribble/./src/max.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__13__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNote","str","test","expandStr","JSON","stringify","split","replace","parse","shuffle","arr","lastIndex","length","forEach","el","idx","rnd","Math","round","random","sizzleMap","maxLevel","pi","PI","piArr","piArrRev","reverse","concat","map","element","sin","pickOne","dice","tonal_1","chordNames","Chord","names","utils_1","getChord","Error","spl","tokenizedName","tokenize","chordName","numericalChords","exists","TypeError","chord","note","transpose","Note","simplify","chords","__importStar","this","mod","result","k","Tonal","getScale","tonicOctScale","toLowerCase","scaleName","Scale","notes","scales","__assign","assign","arguments","apply","chord_1","browserClip","hdr","clip","params","pattern","sizzle","sizzleReps","arpegiate","subdiv","amp","accentLow","randomNotes","effects","offlineRendering","Array","isArray","synth","instrument","sample","buffer","player","samples","sampler","clipNotes","step","recursivelyApplyPatternToNotes","patternArr","char","push","level","volArr","style","beats","stepLevel","abs","accent","a","_i","clipNotes_1","clipNote","exported","DEFAULT_VOLUME","Util","DEFAULT_DURATION","DEFAULT_CHANNEL","midi_letter_pitches","b","e","f","g","midiPitchFromNote","matches","exec","accidental","parseInt","substr","ensureMidiPitch","midi_pitches_letter","midi_flattened_notes","noteFromMidiPitch","returnFlattened","noteName","octave","noteNum","floor","indexOf","mpqnFromBpm","bpm","mpqn","ret","unshift","bpmFromMpqn","codes2Str","byteArray","String","fromCharCode","str2Bytes","finalBytes","bytes","chars","translateTickTime","ticks","bList","MidiEvent","type","undefined","channel","param1","setTime","time","setType","setChannel","setParam1","setParam2","param2","NOTE_OFF","NOTE_ON","AFTER_TOUCH","CONTROLLER","PROGRAM_CHANGE","CHANNEL_AFTERTOUCH","PITCH_BEND","toBytes","typeChannelByte","MetaEvent","setData","data","SEQUENCE","TEXT","COPYRIGHT","TRACK_NAME","INSTRUMENT","LYRIC","MARKER","CUE_POINT","CHANNEL_PREFIX","END_OF_TRACK","TEMPO","SMPTE","TIME_SIG","KEY_SIG","SEQ_EVENT","dataBytes","x","charCodeAt","Track","config","events","START_BYTES","END_BYTES","addEvent","event","addNoteOn","noteOn","pitch","velocity","addNoteOff","noteOff","addNote","dur","addChord","index","setInstrument","setTempo","tempo","trackLength","eventBytes","startBytes","endBytes","lengthBytes","toString","File","tracks","HDR_CHUNKID","HDR_CHUNK_SIZE","HDR_TYPE0","HDR_TYPE1","addTrack","track","trackCount","Event","Midi","NAMES","accTypes","slice","filter","acc","SHARPS","FLATS","REGEX","toUpperCase","NO_NOTE","freeze","pc","alt","oct","octStr","chroma","midi","freq","SEMI","props","fn","cache","memo","tokens","letter","midiToFreq","tuning","pow","L2","log","L440","freqToMidi","v","stepToLetter","fillStr","join","altToAcc","num","op","numToStr","fromProps","baseNote","_a","build","fromMidi","sharps","sameAcc","useSharps","enharmonic","range","ascR","descR","rotate","times","len","compact","height","sort","src","unique","permutations","reduce","perm","pos","newPerm","splice","RegExp","SIZES","CLASSES","types","NO_IVL","q","dir","simple","semitones","qToAlt","altToQ","numToStep","ic","ivl","_b","_c","intervalProps","invert","IN","IQ","fromSemitones","FIFTHS","FIFTH_OCTS","STEPS","decode","unaltered","encoder","ref","encode","encodeNote","encodeIvl","interval","tr","trFifths","fifths","from","to","transposeBy","decodeIvl","addIntervals","ivl1","ivl2","i1","i2","subtract","pcsetNum","set","isChroma","chromas","clen","modes","normalize","binary","_","IVLS","isEqual","s1","s2","isSubsetOf","isSupersetOf","includes","dictionary","raw","keys","add","ivls","alias","chr","allKeys","dict","combine","NO_SCALE","intervals","setnum","memoize","nameOrTonic","tonic","substring","modeNames","tonics","inScale","toScale","pcset","scale","supersets","isSuperset","subsets","isSubset","NO_CHORD","NUM_TYPES","scale_1","clip_1","progression_1","getChordDegrees","getChordsByProgression","progression","arp_1","arp","midi_1","session_1","Session","max_1","max","__spreadArrays","il","j","jl","getNote","counter","getDuration","durations","recursivelyApplyPatternToDurations","originalContext","isToneV13","Tone","version","generateSequence","Ticks","toSeconds","eff","start","Player","Sampler","console","warn","volume","chain","Master","Destination","Sequence","triggerAttackRelease","getSamplerSeqFn","toMaster","toDestination","PolySynth","getInstrSeqFn","getMonoInstrSeqFn","offlineClipId","ongoingRenderingCounter","duration","getContext","context","loop","clipId","Offline","transport","then","setContext","timeEnd","sync","offlineRenderClip","accumulator","currentValue","theRomans","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","major","minor","idxByDegree","ii","iii","iv","vi","vii","noteOctaveScale","chordDegress","noteOctaveScaleArr","match","roman","prefix","getChordName","scaleId","getProgFactory","T","P","D","count","M","chordsOrParams","finalArr","order","_loop_1","bumpOctave","arr1","arr2","filledArr","reorderedArr","chordsArr_1","__importDefault","fs_1","jsmidgen","fileName","createFileFromNotes","endsWith","URL","createObjectURL","createDownloadLink","default","writeFileSync","Uint8Array","ascii","blob","Blob","link","document","createElement","href","download","innerText","file","notes_1","noteObj","webpackPolyfill","deprecate","paths","children","channel_1","sessionChannels","ch","Channel","createChannel","newChannel","configurable","startRow","startClip","__rest","getOwnPropertySymbols","propertyIsEnumerable","getNextPos","Transport","position","_this","activePatternIdx","channelClips","clips","originalParamsFiltered","addClip","stopClip","state","stop","clipParams","jsmidgen_1","liveClip","liveObject","LiveAPI","totalLength","noteCount","cursor","toFixed"],"mappings":"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","file":"scribbletune.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scribble\"] = factory(require(\"fs\"));\n\telse\n\t\troot[\"scribble\"] = factory(root[\"fs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__13__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Take a string input and check if it s a note name or not\n * @param  {String} str Note name e.g. c4\n * @return {Boolean} Return true for c4 or return false for something like CM\n */\nexports.isNote = function (str) {\n    return /^[a-gA-G](?:#|b)?\\d$/.test(str);\n};\n/**\n * Take a String input such as xxx[xx[xx]]\n * and return an Array as ['x', 'x', 'x', ['x', 'x', ['x', 'x']]]\n * @param  {String} str\n * @return {Array}\n */\nexports.expandStr = function (str) {\n    str = JSON.stringify(str.split(''));\n    str = str.replace(/,\"\\[\",/g, ', [');\n    str = str.replace(/\"\\[\",/g, '[');\n    str = str.replace(/,\"\\]\"/g, ']');\n    return JSON.parse(str);\n};\n/**\n * Basic Array randomizer\n * @param  {Array} arr\n * @return {Array}\n */\nexports.shuffle = function (arr) {\n    var lastIndex = arr.length - 1;\n    arr.forEach(function (el, idx) {\n        var rnd = Math.round(Math.random() * lastIndex);\n        arr[idx] = arr[rnd];\n        arr[rnd] = el;\n    });\n    return arr;\n};\n/**\n * Return an array of numbers relative to maxLevel || 127 ordered in a Sine wave format\n * This is used by the `sizzle` param of the `clip` method to add a rudimentary variation to the accent of each note\n * @param {Number} maxLevel A number between not more than 127\n * @return {Array}  Example output [63, 90, 110, 127, 110, 90, 63, 0, 63, 90, 110, 127, 110, 90, 63, 0]\n */\nexports.sizzleMap = function (maxLevel) {\n    if (maxLevel === void 0) { maxLevel = 127; }\n    var pi = Math.PI;\n    var piArr = [\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n        pi,\n    ];\n    var piArrRev = [\n        0,\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n    ];\n    piArrRev.reverse();\n    var arr = piArr.concat(piArrRev);\n    return arr.map(function (element) { return Math.round(Math.sin(element) * maxLevel); });\n};\n/**\n * Pick one item randomly from an array and return it\n * @param arr\n */\nexports.pickOne = function (arr) {\n    return arr.length > 1 ? arr[Math.round(Math.random())] : arr[0];\n};\n/**\n * Boolean generator\n */\nexports.dice = function () { return !!Math.round(Math.random()); };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tonal_1 = require(\"tonal\");\nvar chordNames = tonal_1.Chord.names();\nvar utils_1 = require(\"./utils\");\n/**\n * Derive a chord from the given string. Exposed as simply `chord` in Scribbletune\n * @return {Array}     [example `chord('CM')` outputs: ['c4', 'e4', 'g4'], `chord('CM-5')` outputs: ['c5', 'e5', 'g5']]\n */\nexports.getChord = function (name) {\n    if (utils_1.isNote(name)) {\n        throw new Error(name + \" is not a chord!\");\n    }\n    // Separate the octave from the chord\n    var spl = name.split('-'); // e.g. CMaj7-4 => ['CMaj7', '4'];\n    // tonal doesnt recognize 5 and below in the `tokenize` method,\n    // hence explicitly massage those out\n    var tokenizedName = tonal_1.Chord.tokenize(spl[0]); // e.g. ['C', 'Maj7']\n    var root = tokenizedName[0];\n    var chordName = tokenizedName[1];\n    if (root[1] === '4' || root[1] === '5') {\n        chordName = root[1];\n        root = root.replace(/\\d/, '');\n    }\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4th': '4',\n        '5th': '5',\n        '7th': '7',\n        '9th': '9',\n        '11th': '11',\n        '13th': '13',\n    };\n    if (numericalChords[chordName]) {\n        chordName = numericalChords[chordName];\n    }\n    if (!tonal_1.Chord.exists(chordName)) {\n        throw new TypeError('Invalid chord name: ' + chordName);\n    }\n    return (tonal_1.chord(chordName) || []).map(function (el) {\n        var note = tonal_1.transpose.bind(null, root + (spl[1] || 4))(el);\n        return tonal_1.Note.simplify(note);\n    });\n};\n/**\n * Get a list of chords available in Scribbletune.\n * @return {Array}     [example output: ['maj', 'min', 'dim']]\n */\nexports.chords = function () {\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4': '4th',\n        '5': '5th',\n        '7': '7th',\n        '9': '9th',\n        '11': '11th',\n        '13': '13th',\n    };\n    return chordNames.map(function (c) {\n        if (/^\\d+$/.test(c) && numericalChords[c]) {\n            return numericalChords[c];\n        }\n        else {\n            return c;\n        }\n    });\n};\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Tonal = __importStar(require(\"tonal\"));\nexports.getScale = function (tonicOctScale) {\n    tonicOctScale = tonicOctScale && tonicOctScale.toLowerCase();\n    // In Tonal, the only scales that are not entirely lower case are\n    // lydian #5P pentatonic and minor #7M pentatonic,\n    // hence make provision for them separately\n    tonicOctScale = tonicOctScale.replace('#5p', '#5P');\n    tonicOctScale = tonicOctScale.replace('#7m', '#7M');\n    var tokenizedName = Tonal.Scale.tokenize(tonicOctScale);\n    var scaleName = tokenizedName[1];\n    if (!Tonal.Scale.exists(scaleName)) {\n        throw new Error(tonicOctScale + \" does not exist!\");\n    }\n    return Tonal.Scale.notes(tonicOctScale).map(Tonal.Note.simplify);\n};\nexports.scales = function () {\n    return Tonal.Scale.names();\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar chord_1 = require(\"./chord\");\n/* tslint:disable:no-var-requires */\nvar browserClip = typeof window !== 'undefined' && require('./browserClip').browserClip;\n/**\n * Get default params for a clip, such as root note, pattern etc\n * @return {Object}\n */\nvar getDefaultParams = function () { return ({\n    notes: ['C4'],\n    pattern: 'x',\n    shuffle: false,\n    sizzle: false,\n    sizzleReps: 1,\n    arpegiate: false,\n    subdiv: '4n',\n    amp: 100,\n    accentLow: 70,\n    randomNotes: null,\n    effects: [],\n    offlineRendering: false,\n}); };\n/**\n * HDR speed is denoted by the number of ticks per note\n * By default this is set to a quarter note (4n) to be in line with Tone.js' default subdivision\n * Technically a bar is 512 ticks long. So it's HDR speed is 512\n * @type {Object}\n */\nvar hdr = {\n    '1m': 2048,\n    '2m': 4096,\n    '3m': 6144,\n    '4m': 8192,\n    '1n': 512,\n    '2n': 256,\n    '4n': 128,\n    '8n': 64,\n    '16n': 32,\n};\nexports.clip = function (params) {\n    params = __assign(__assign({}, getDefaultParams()), (params || {}));\n    // If notes is a string, split it into an array\n    if (typeof params.notes === 'string') {\n        // Remove any accidental double spaces\n        params.notes = params.notes.replace(/\\s{2,}/g, ' ');\n        params.notes = params.notes.split(' ');\n    }\n    // Convert chords if any to notes\n    params.notes = params.notes.map(function (el) {\n        if (utils_1.isNote(el)) {\n            // A note needs to be an array so that it can accomodate chords or single notes with a single interface\n            return [el];\n        }\n        if (Array.isArray(el)) {\n            // This could be a chord provided as an array\n            // make sure it uses valid notes\n            el.forEach(function (n) {\n                if (!utils_1.isNote(n)) {\n                    throw new TypeError('array must comprise valid notes');\n                }\n            });\n            return el;\n        }\n        if (!Array.isArray(el) && chord_1.getChord(el)) {\n            el = chord_1.getChord(el);\n            return el;\n        }\n    });\n    if (/[^x\\-_\\[\\]R]/.test(params.pattern)) {\n        throw new TypeError(\"pattern can only comprise x - _ [ ], found \" + params.pattern);\n    }\n    if (params.shuffle) {\n        params.notes = utils_1.shuffle(params.notes);\n    }\n    if (params.randomNotes && typeof params.randomNotes === 'string') {\n        params.randomNotes = params.randomNotes.replace(/\\s{2,}/g, ' ');\n        params.randomNotes = params.randomNotes.split(/\\s/);\n    }\n    if (params.randomNotes) {\n        params.randomNotes = params.randomNotes.map(function (el) { return [\n            el,\n        ]; });\n    }\n    // If the clip method is being called in the context of a Tone.js instrument or synth,\n    // then there's no need to continue\n    if (params.synth ||\n        params.instrument ||\n        params.sample ||\n        params.buffer ||\n        params.player ||\n        params.samples ||\n        params.sampler) {\n        return browserClip(params);\n    }\n    var clipNotes = [];\n    var step = 0;\n    /**\n     * Recursively apply pattern to notes\n     *\n     * Pass in a pattern array such as ['x', '-', 'x', 'x'] with a length for each element\n     * The length is the HDR speed or tick length (obtained from the hdr object in this script)\n     * If the element of this array is also a (pattern) array, then divide the length by\n     * the length of the inner array and then call the recursive function on that inner array\n     */\n    var recursivelyApplyPatternToNotes = function (patternArr, length) {\n        patternArr.forEach(function (char) {\n            if (typeof char === 'string') {\n                var note = null;\n                // If the note is to be `on`, then it needs to be an array\n                if (char === 'x') {\n                    note = params.notes[step];\n                    step++;\n                }\n                if (char === 'R' && (Math.round(Math.random()) || params.randomNotes)) {\n                    note = params.randomNotes\n                        ? params.randomNotes[Math.round(Math.random() * (params.randomNotes.length - 1))]\n                        : params.notes[step];\n                    step++;\n                }\n                // Push only note on OR off messages to the clip notes array\n                if (char === 'x' || char === '-' || char === 'R') {\n                    clipNotes.push({\n                        note: note,\n                        length: length,\n                        level: char === 'R' && !params.randomNotes\n                            ? params.accentLow\n                            : params.amp,\n                    });\n                }\n                // In case of an underscore, simply extend the previous note's length\n                if (char === '_' && clipNotes.length) {\n                    clipNotes[clipNotes.length - 1].length += length;\n                }\n                // If the pattern is longer than the notes, then repeat notes\n                if (step === params.notes.length) {\n                    step = 0;\n                }\n            }\n            if (Array.isArray(char)) {\n                recursivelyApplyPatternToNotes(char, length / char.length);\n            }\n        });\n    };\n    recursivelyApplyPatternToNotes(utils_1.expandStr(params.pattern), hdr[params.subdiv] || hdr['4n']);\n    // Many thanks to @R1G for the following functionality\n    if (params.sizzle) {\n        var volArr = [];\n        var style = params.sizzle === true ? 'sin' : params.sizzle;\n        var beats = clipNotes.length;\n        var amp = params.amp;\n        var sizzleReps = params.sizzleReps;\n        var stepLevel = amp / (beats / sizzleReps);\n        if (style === 'sin' || style === 'cos') {\n            for (var i = 0; i < beats; i++) {\n                var level = Math[style]((i * Math.PI) / (beats / sizzleReps)) * amp;\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampUp') {\n            var level = 0;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = 0;\n                }\n                else {\n                    level = level + stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampDown') {\n            var level = amp;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = amp;\n                }\n                else {\n                    level = level - stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        for (var i = 0; i < volArr.length; i++) {\n            clipNotes[i].level = volArr[i] ? volArr[i] : 1; // Cannot allow 0 value on level\n        }\n    }\n    if (params.accent) {\n        if (/[^x\\-]/.test(params.accent)) {\n            throw new TypeError('Accent can only have x and - characters');\n        }\n        var a = 0;\n        for (var _i = 0, clipNotes_1 = clipNotes; _i < clipNotes_1.length; _i++) {\n            var clipNote = clipNotes_1[_i];\n            var level = params.accent[a] === 'x'\n                ? params.amp\n                : params.accentLow;\n            if (params.sizzle) {\n                level = (clipNote.level + level) / 2;\n            }\n            clipNote.level = Math.round(level);\n            // Step to the next character in the accent\n            a = a + 1;\n            // Reset `a` so that it can loop over the accent\n            if (a === params.accent.length) {\n                a = 0;\n            }\n        }\n    }\n    return clipNotes;\n};\n","var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n","var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {string} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {string} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {string} to - note or pitch class\n * @param {string} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {string} minuend\n * @param {string} subtrahend\n * @return {string} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {string} from - distance from\n * @param {string} to - distance to\n * @return {string} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {string} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {string} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {string} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {string} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} [aliases=false] - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {string} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<string>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {string} tonic\n * @param {string} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {string} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {string} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * Scale.modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * Scale.chords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n * @example\n * Scale.toScale(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * Scale.toScale(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * Scale.supersets(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * Scale.subsets(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {string} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {string} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {string} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {string} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  if (name) { return props(name).intervals.map(transpose(nameOrTonic)); }\n  var ref = tokenize(nameOrTonic);\n  var tonic = ref[0];\n  var type = ref[1];\n  return props(type).intervals.map(transpose(tonic));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {string} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {string} note\n * @param {string} interval\n * @return {string} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {string} from\n * @param {string} to\n * @return {string} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {string} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {string} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\nexports.scale = scale_1.getScale;\nexports.mode = scale_1.getScale;\nexports.scales = scale_1.scales;\nexports.modes = scale_1.scales;\nvar chord_1 = require(\"./chord\");\nexports.chord = chord_1.getChord;\nexports.chords = chord_1.chords;\nvar clip_1 = require(\"./clip\");\nexports.clip = clip_1.clip;\nvar progression_1 = require(\"./progression\");\nexports.getChordDegrees = progression_1.getChordDegrees;\nexports.getChordsByProgression = progression_1.getChordsByProgression;\nexports.progression = progression_1.progression;\nvar arp_1 = require(\"./arp\");\nexports.arp = arp_1.arp;\nvar midi_1 = require(\"./midi\");\nexports.midi = midi_1.midi;\nvar session_1 = require(\"./session\");\nexports.Session = session_1.Session;\nvar max_1 = require(\"./max\");\nexports.max = max_1.max;\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar defaultSubdiv = '4n';\nvar defaultDur = '8n';\nvar random = function (num) {\n    if (num === void 0) { num = 1; }\n    return Math.round(Math.random() * num);\n};\n/**\n * @param  {Tone.js Player Object}\n * @return {Function}\n * Take a Tone.js Player and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getPlayerSeqFn = function (player) {\n    return function (time, el) {\n        if (el === 'x' || (el === 'R' && random())) {\n            player.start(time);\n        }\n    };\n};\nvar getNote = function (el, params, counter) {\n    return el === 'R' && params.randomNotes\n        ? params.randomNotes[random(params.randomNotes.length - 1)]\n        : params.notes[counter % params.notes.length];\n};\nvar getDuration = function (params, counter) {\n    return params.durations\n        ? params.durations[counter % params.durations.length]\n        : params.dur || params.subdiv || defaultDur;\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js instrument and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getInstrSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' || el === 'R') {\n            params.instrument.triggerAttackRelease(getNote(el, params, counter), getDuration(params, counter), time);\n            counter++;\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js instrument and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getMonoInstrSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' || el === 'R') {\n            params.instrument.triggerAttackRelease(getNote(el, params, counter)[0], getDuration(params, counter), time);\n            counter++;\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js sampler and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getSamplerSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' || el === 'R') {\n            params.sampler.triggerAttackRelease(getNote(el, params, counter), getDuration(params, counter), time);\n            counter++;\n        }\n    };\n};\nexports.recursivelyApplyPatternToDurations = function (patternArr, length, durations) {\n    if (durations === void 0) { durations = []; }\n    patternArr.forEach(function (char) {\n        if (typeof char === 'string') {\n            if (char === 'x' || char === 'R') {\n                durations.push(length);\n            }\n            if (char === '_' && durations.length) {\n                durations[durations.length - 1] += length;\n            }\n        }\n        if (Array.isArray(char)) {\n            exports.recursivelyApplyPatternToDurations(char, length / char.length, durations);\n        }\n    });\n    return durations;\n};\nvar isToneV13 = function () {\n    return Tone.version.split('.')[0] === '13';\n};\nvar generateSequence = function (params) {\n    var _a, _b, _c;\n    if (!params.pattern) {\n        throw new Error('No pattern provided!');\n    }\n    if (!params.player &&\n        !params.instrument &&\n        !params.sample &&\n        !params.buffer &&\n        !params.synth &&\n        !params.sampler &&\n        !params.samples) {\n        throw new Error('No player or instrument provided!');\n    }\n    if (!params.durations && !params.dur) {\n        params.durations = exports.recursivelyApplyPatternToDurations(utils_1.expandStr(params.pattern), Tone.Ticks(params.subdiv || defaultSubdiv).toSeconds());\n    }\n    /*\n      1. The params object can be used to pass a sample (sound source) OR a synth(Synth/FMSynth/AMSynth etc) or samples.\n      Scribbletune will then create a Tone.js Player or Tone.js Instrument or Tone.js Sampler respectively\n      2. It can also be used to pass a Tone.js Player object or instrument that was created elsewhere\n      (mostly by Scribbletune itself in the channel creation method)\n      Either ways, a pattern is required and it will be used to create a playable Tone.js Sequence\n       */\n    var effects = [];\n    var createEffect = function (eff) {\n        if (typeof eff === 'string') {\n            return new Tone[eff]();\n        }\n        else {\n            return eff;\n        }\n    };\n    var startEffect = function (eff) {\n        if (typeof eff.start === 'function') {\n            return eff.start();\n        }\n        else {\n            return eff;\n        }\n    };\n    if (params.effects) {\n        if (!Array.isArray(params.effects)) {\n            params.effects = [params.effects];\n        }\n        effects = params.effects.map(createEffect).map(startEffect);\n    }\n    if (params.sample || params.buffer) {\n        // This implies, the clip is probably being hand created by the user with a audio sample\n        params.player = new Tone.Player(params.sample || params.buffer);\n    }\n    if (params.samples) {\n        params.sampler = new Tone.Sampler(params.samples);\n    }\n    if (params.synth && !params.instrument) {\n        // This implies, the synth is probably being hand created by the user with an available Tone synth\n        console.warn('The \"synth\" parameter will be deprecated in the future. Please use the \"instrument\" parameter instead.');\n        params.instrument = new Tone[params.synth]();\n    }\n    if (params.instrument) {\n        if (typeof params.instrument === 'string') {\n            params.instrument = new Tone[params.instrument]();\n        }\n    }\n    if (params.player) {\n        if (params.volume) {\n            params.player.volume.value = params.volume;\n        }\n        (_a = params.player).chain.apply(_a, __spreadArrays(effects, [Tone.Master ? Tone.Master : Tone.Destination]));\n        // This implies, a player object was already created (either by user or by Scribbletune during channel creation)\n        return new Tone.Sequence(getPlayerSeqFn(params.player), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n    if (params.sampler) {\n        if (params.volume) {\n            params.sampler.volume.value = params.volume;\n        }\n        (_b = params.sampler).chain.apply(_b, __spreadArrays(effects, [Tone.Master ? Tone.Master : Tone.Destination]));\n        // This implies, a sampler object was already created (either by user or by Scribbletune during channel creation)\n        return new Tone.Sequence(getSamplerSeqFn(params), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n    if (params.instrument) {\n        if (params.volume) {\n            params.instrument.volume.value = params.volume;\n        }\n        (_c = params.instrument).chain.apply(_c, effects);\n        if (isToneV13()) {\n            params.instrument.toMaster();\n        }\n        else {\n            params.instrument.toDestination();\n        }\n        // This implies, the instrument was already created (either by user or by Scribbletune during channel creation)\n        // Unlike player, the instrument needs the entire params object to construct a sequence\n        return new Tone.Sequence(params.instrument instanceof Tone.PolySynth\n            ? getInstrSeqFn(params)\n            : getMonoInstrSeqFn(params), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n};\nvar totalPatternDuration = function (pattern, subdiv) {\n    return exports.recursivelyApplyPatternToDurations(utils_1.expandStr(pattern), Tone.Ticks(subdiv).toSeconds()).reduce(function (accumulator, currentValue) {\n        return accumulator + currentValue;\n    });\n};\nvar offlineClipId = 0;\nvar ongoingRenderingCounter = 0;\nvar originalContext;\nvar offlineRenderClip = function (params, duration) {\n    if (!originalContext) {\n        originalContext = Tone.getContext();\n    }\n    ongoingRenderingCounter++;\n    var player = new Tone.Player({ context: originalContext, loop: true });\n    var clipId = offlineClipId++;\n    console.log(\"Offline rendering of clip \" + clipId + \"...\");\n    console.time(\"Offline rendering of clip \" + clipId + \" done\");\n    Tone.Offline(function (_a) {\n        var transport = _a.transport;\n        var sequence = generateSequence(params);\n        sequence.start();\n        transport.start();\n    }, duration).then(function (buffer) {\n        player.buffer = buffer;\n        ongoingRenderingCounter--;\n        if (ongoingRenderingCounter === 0) {\n            Tone.setContext(originalContext);\n        }\n        console.timeEnd(\"Offline rendering of clip \" + clipId + \" done\");\n    });\n    player.toDestination();\n    player.sync();\n    return player;\n};\n/**\n * @param  {Object}\n * @return {Tone.js Sequence Object}\n * Take a object literal that may have a Tone.js player OR instrument\n * or simply a sample or synth with a pattern and return a Tone.js sequence\n */\nexports.browserClip = function (params) {\n    if (params.offlineRendering) {\n        if (isToneV13()) {\n            console.warn('Offline rendering not available for Tone <14. Please use Tone >=14.');\n        }\n        else {\n            return offlineRenderClip(params, totalPatternDuration(params.pattern, params.subdiv || defaultSubdiv));\n        }\n    }\n    else {\n        return generateSequence(params);\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\nvar utils_1 = require(\"./utils\");\n/**\n * Get the chords that go with a given scale/mode\n * This is useful only in case you want to check what chords work with a scale/mode\n * so that you can come up with chord progressions\n * @param  {String} mode e.g. major\n * @return {Array} e.g.['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°']\n */\nexports.getChordDegrees = function (mode) {\n    var theRomans = {\n        ionian: ['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°'],\n        dorian: ['i', 'ii', 'III', 'IV', 'v', 'vi°', 'VII'],\n        phrygian: ['i', 'II', 'III', 'iv', 'v°', 'VI', 'vii'],\n        lydian: ['I', 'II', 'iii', 'iv°', 'V', 'vi', 'vii'],\n        mixolydian: ['I', 'ii', 'iii°', 'IV', 'v', 'vi', 'VII'],\n        aeolian: ['i', 'ii°', 'III', 'iv', 'v', 'VI', 'VII'],\n        locrian: ['i°', 'II', 'iii', 'iv', 'V', 'VI', 'vii'],\n        'melodic minor': ['i', 'ii', 'III+', 'IV', 'V', 'vi°', 'vii°'],\n        'harmonic minor': ['i', 'ii°', 'III+', 'iv', 'V', 'VI', 'vii°'],\n    };\n    theRomans.major = theRomans.ionian;\n    theRomans.minor = theRomans.aeolian;\n    return theRomans[mode] || [];\n};\nvar idxByDegree = {\n    i: 0,\n    ii: 1,\n    iii: 2,\n    iv: 3,\n    v: 4,\n    vi: 5,\n    vii: 6,\n};\n/**\n * Get a chord name from degree\n * @param  {String} roman e.g. ii OR ii° OR V7\n * @return {String} e.g. m OR m7b5 OR Maj7\n */\nvar getChordName = function (roman) {\n    // remove any non character\n    var str = roman.replace(/\\W/g, '');\n    var prefix = 'M';\n    // check if it s lowercase\n    if (str.toLowerCase() === str) {\n        prefix = 'm';\n    }\n    if (roman.indexOf('°') > -1) {\n        return prefix + '7b5';\n    }\n    if (roman.indexOf('+') > -1) {\n        return prefix + '#5';\n    }\n    if (roman.indexOf('7') > -1) {\n        return prefix === 'M' ? 'Maj7' : 'm7';\n    }\n    return prefix;\n};\n/**\n * Take the specified scale and degrees and return the chord names for them\n * These can be used as the value for the `notes` param of the `clip` method\n * @param {String} noteOctaveScale e.g. 'C4 major'\n * @param  {String} chordDegress e.g. 'I IV V IV'\n * @return {String} e.g. 'CM FM GM FM'\n */\nexports.getChordsByProgression = function (noteOctaveScale, chordDegress) {\n    // Set the octave if missing\n    // For example if the method was called with `C major` instead of `C4 major`, then add the 4\n    var noteOctaveScaleArr = noteOctaveScale.split(' ');\n    if (!noteOctaveScaleArr[0].match(/\\d/)) {\n        noteOctaveScaleArr[0] += '4';\n        noteOctaveScale = noteOctaveScaleArr.join(' ');\n    }\n    // Get the scale from the given note and scale/mode combination\n    var mode = scale_1.getScale(noteOctaveScale);\n    var chordDegreesArr = chordDegress.replace(/\\s*,+\\s*/g, ' ').split(' ');\n    // Now we have something like ['i', 'ii', 'IV']\n    // Convert it to a chord family such as ['Cm', 'Dm', 'FM']\n    var chordFamily = chordDegreesArr.map(function (roman, idx) {\n        var chordName = getChordName(roman); // e.g. m\n        // get the index to be used by removing any digit or non alphabet character\n        var scaleId = idxByDegree[roman.replace(/\\W|\\d/g, '').toLowerCase()]; // e.g. 0\n        // get the note itself\n        var note = mode[scaleId]; // e.g. C\n        // get the octave of the note;\n        var oct = note.replace(/\\D+/, ''); // e.g. 4\n        // now get the chord\n        return note.replace(/\\d/, '') + chordName + '-' + oct;\n    });\n    return chordFamily.toString().replace(/,/g, ' ');\n};\nvar getProgFactory = function (_a) {\n    var T = _a.T, P = _a.P, D = _a.D;\n    return function (count) {\n        if (count === void 0) { count = 4; }\n        var chords = [];\n        // Push root/tonic\n        chords.push(utils_1.pickOne(T));\n        var i = 1;\n        // Pick a predominant\n        if (i < count - 1) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        // Try another predominant\n        if (i < count - 1 && utils_1.dice()) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        ///////// 4 or more//////////\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a predominant\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        // Pick a predominant if possible\n        if (i < count - 1 && utils_1.dice()) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        ////////////////////////////\n        // Fill the rest with dominant\n        while (i < count) {\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        return chords;\n    };\n};\nvar M = getProgFactory({ T: ['I', 'vi'], P: ['ii', 'IV'], D: ['V'] });\nvar m = getProgFactory({ T: ['i', 'VI'], P: ['ii', 'iv'], D: ['V'] });\n/**\n * Generate a chord progression based on basic music theory\n * where we follow tonic to optionally predominant and then dominant\n * and then randomly to predominant and continue this till we reach `count`\n * @param scale e.g. M (for major chord progression), m (for minor chord progression)\n * @param count e.g. 4\n */\nexports.progression = function (scale, count) {\n    if (count === void 0) { count = 4; }\n    if (scale === 'major' || scale === 'M') {\n        return M(count);\n    }\n    if (scale === 'minor' || scale === 'm') {\n        return m(count);\n    }\n};\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chord_1 = require(\"./chord\");\n/**\n * Take an array and fill it with it s own elements in the next octave till it s of the specified `len`\n * @param  {Array} arr e.g. ['a4', 'b4']\n * @param  {Number} e.g. len 4\n * @return {Array} e.g. ['a4', 'b4', 'a5', 'b5']\n */\nvar fillArr = function (arr, len) {\n    var bumpOctave = function (el) {\n        var note = el.replace(/\\d/, '');\n        var oct = el.replace(/\\D/g, '');\n        return note + (+oct + 1);\n    };\n    // Create a couple of chord arrays with bumped octaves\n    // so that something like [c3, e3, g4] turns into [c4, e4, g5] and [c5, e5, g6]\n    var arr1 = arr.map(bumpOctave);\n    var arr2 = arr1.map(bumpOctave);\n    var finalArr = __spreadArrays(arr, arr1, arr2);\n    // Slice and return only as much as required\n    return finalArr.slice(0, len);\n};\n/**\n *\n * @param chordsOrParams a string that denotes comma separated chords to be used or an object with additional properties\n * By default, if this is a string, the the count of notes generated is 8 and the order is ascending.\n * For instance arp('CM FM') will result in an array of notes [C4, E4, G4, F4, A4, C4, C5, E5]\n * You can even provide Params as an object.\n * For e.g. arp({count: 8, order: '10325476', chords: 'FM-4 Gm7b5-4 AbM-4 Bbm-4 Cm-5 DbM-5 EbM-5})\n */\nexports.arp = function (chordsOrParams) {\n    var finalArr = [];\n    var params = {\n        count: 4,\n        order: '0123',\n        chords: '',\n    };\n    if (typeof chordsOrParams === 'string') {\n        params.chords = chordsOrParams;\n    }\n    else {\n        if (chordsOrParams.order && chordsOrParams.order.match(/\\D/g)) {\n            throw new TypeError('Invalid value for order');\n        }\n        if (chordsOrParams.count > 8 || chordsOrParams.count < 2) {\n            throw new TypeError('Invalid value for count');\n        }\n        // Provision a order for the notes in case only count was provided\n        if (chordsOrParams.count && !chordsOrParams.order) {\n            params.order = Array.from(Array(chordsOrParams.count).keys()).join('');\n        }\n        Object.assign(params, chordsOrParams);\n    }\n    var chordsArr = params.chords.split(' ');\n    var _loop_1 = function (chord) {\n        var filledArr = fillArr(chord_1.getChord(chord), params.count);\n        // reorder the filledArr as per params.order\n        var reorderedArr = params.order\n            .split('')\n            .map(function (idx) { return filledArr[idx]; });\n        finalArr = __spreadArrays(finalArr, reorderedArr);\n    };\n    for (var _i = 0, chordsArr_1 = chordsArr; _i < chordsArr_1.length; _i++) {\n        var chord = chordsArr_1[_i];\n        _loop_1(chord);\n    }\n    return finalArr;\n};\n","\"use strict\";\n/*global LiveAPI:true*/\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(require(\"fs\"));\nvar jsmidgen = __importStar(require(\"jsmidgen\"));\n/**\n * Take an array of note objects to generate a MIDI file in the same location as this method is called\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n * @param  {String | null} fileName If a filename is not provided, then `music.mid` is used by default\n * If `null` is passed for `fileName`, bytes are returned instead of creating a file\n * If this method is called from a browser then it will return a HTML link that you can append in your page\n * This link will enable the generated MIDI as a downloadable file.\n * @param {Number | null} bpm If a value is provided, the generated midi file will be set to this bpm value.\n */\nexports.midi = function (notes, fileName, bpm) {\n    if (fileName === void 0) { fileName = 'music.mid'; }\n    var file = createFileFromNotes(notes, bpm);\n    var bytes = file.toBytes();\n    if (fileName === null) {\n        return bytes;\n    }\n    if (!fileName.endsWith('.mid')) {\n        fileName = fileName + '.mid';\n    }\n    if (typeof window !== 'undefined' &&\n        window.URL &&\n        window.URL.createObjectURL) {\n        return createDownloadLink(bytes, fileName);\n    }\n    fs_1.default.writeFileSync(fileName, bytes, 'binary');\n    console.log(\"MIDI file generated: \" + fileName + \".\");\n};\n/**\n * Create a downloadable link\n * @param b\n */\nvar createDownloadLink = function (b, fileName) {\n    // Convert bytes to array buffer\n    // Accepted answer on https://stackoverflow.com/questions/35038884/download-file-from-bytes-in-javascript\n    var bytes = new Uint8Array(b.length);\n    for (var i = 0; i < b.length; i++) {\n        var ascii = b.charCodeAt(i);\n        bytes[i] = ascii;\n    }\n    // Create a Blob so that we can set it up with the type of file we want (for eg MIDI)\n    var blob = new Blob([bytes], { type: 'audio/midi' });\n    // Create a link element to be used (you can use an existing link on the page as well)\n    var link = document.createElement('a');\n    link.href =\n        (typeof window !== 'undefined' &&\n            typeof window.URL !== 'undefined' &&\n            typeof window.URL.createObjectURL !== 'undefined' &&\n            window.URL.createObjectURL(blob)) ||\n            '';\n    // Give the downloadable file a name\n    link.download = fileName;\n    link.innerText = 'Download MIDI file';\n    return link;\n};\nvar createFileFromNotes = function (notes, bpm) {\n    var file = new jsmidgen.File();\n    var track = new jsmidgen.Track();\n    // set the track's bpm if it is provided\n    if (typeof bpm === 'number') {\n        track.setTempo(bpm);\n    }\n    file.addTrack(track);\n    for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {\n        var noteObj = notes_1[_i];\n        var level = noteObj.level || 127;\n        // While writing chords (multiple notes per tick)\n        // only the first noteOn (or noteOff) needs the complete arity of the function call\n        // subsequent calls need only the first 2 args (channel and note)\n        if (noteObj.note) {\n            if (typeof noteObj.note === 'string') {\n                track.noteOn(0, noteObj.note, noteObj.length, level); // channel, pitch(note), length, velocity\n                track.noteOff(0, noteObj.note, noteObj.length, level);\n            }\n            else {\n                track.addChord(0, noteObj.note, noteObj.length, level);\n            }\n        }\n        else {\n            track.noteOff(0, '', noteObj.length);\n        }\n    }\n    return file;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__13__;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"./channel\");\nvar Session = /** @class */ (function () {\n    function Session(arr) {\n        arr = arr || [];\n        this.sessionChannels = arr.map(function (ch, i) {\n            ch.idx = ch.idx || i;\n            return new channel_1.Channel(ch);\n        });\n    }\n    Session.prototype.createChannel = function (ch) {\n        ch.idx = ch.idx || this.sessionChannels.length;\n        var newChannel = new channel_1.Channel(ch);\n        this.sessionChannels.push(newChannel);\n        return newChannel;\n    };\n    Object.defineProperty(Session.prototype, \"channels\", {\n        get: function () {\n            return this.sessionChannels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Start the clips at a specific index in all the channels\n    Session.prototype.startRow = function (idx) {\n        this.sessionChannels.forEach(function (ch) {\n            ch.startClip(idx);\n        });\n    };\n    return Session;\n}());\nexports.Session = Session;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar clip_1 = require(\"./clip\");\n/**\n * Get the next logical position to play in the session\n * Tone has a build-in method `Tone.Transport.nextSubdivision('4n')`\n * but I think it s better to round off as follows for live performance\n */\nvar getNextPos = function () {\n    var arr = Tone.Transport.position.split(':');\n    // If we are still around 0:0:0x, then set start position to 0\n    if (arr[0] === '0' && arr[1] === '0') {\n        return 0;\n    }\n    // Else set it to the next bar\n    return +arr[0] + 1 + ':0:0';\n};\n/**\n * Channel\n * A channel is made up of a Tone.js Player/Instrument, one or more\n * Tone.js sequences (known as clips in Scribbletune)\n * & optionally a set of effects (with or without presets)\n *\n * API:\n * clips -> Get all clips for this channel\n * addClip -> Add a new clip to the channel\n * startClip -> Start a clip at the provided index\n * stopClip -> Stop a clip at the provided index\n * activeClipIdx -> Get the clip that is currently playing\n */\nvar Channel = /** @class */ (function () {\n    function Channel(params) {\n        var _this = this;\n        (this.idx = params.idx), (this.activePatternIdx = -1);\n        this.channelClips = [];\n        if (params.sample) {\n            this.player = new Tone.Player(params.sample);\n        }\n        if (params.synth) {\n            this.instrument = new Tone[params.synth]();\n        }\n        if (params.samples) {\n            this.sampler = new Tone.Sampler(params.samples);\n        }\n        // Filter out unrequired params and create clip params object\n        var clips = params.clips, samples = params.samples, sample = params.sample, synth = params.synth, originalParamsFiltered = __rest(params, [\"clips\", \"samples\", \"sample\", \"synth\"]);\n        params.clips.forEach(function (c) {\n            _this.addClip(__assign(__assign({}, c), originalParamsFiltered));\n        }, this);\n    }\n    Object.defineProperty(Channel.prototype, \"clips\", {\n        get: function () {\n            return this.channelClips;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Channel.prototype.startClip = function (idx) {\n        // Stop any other currently running clip\n        if (this.activePatternIdx > -1 && this.activePatternIdx !== idx) {\n            this.stopClip(this.activePatternIdx);\n        }\n        if (this.channelClips[idx] && this.channelClips[idx].state !== 'started') {\n            this.activePatternIdx = idx;\n            this.channelClips[idx].start(getNextPos());\n        }\n    };\n    Channel.prototype.stopClip = function (idx) {\n        this.channelClips[idx].stop(getNextPos());\n    };\n    Channel.prototype.addClip = function (clipParams, idx) {\n        idx = idx || this.channelClips.length;\n        if (clipParams.pattern) {\n            this.channelClips[idx] = clip_1.clip(__assign({ player: this.player, instrument: this.instrument, sampler: this.sampler }, clipParams));\n        }\n        else {\n            // Allow creation of empty clips\n            this.channelClips[idx] = null;\n        }\n    };\n    Object.defineProperty(Channel.prototype, \"activeClipIdx\", {\n        get: function () {\n            return this.activePatternIdx;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Channel;\n}());\nexports.Channel = Channel;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsmidgen_1 = require(\"jsmidgen\");\n/**\n * Take an array of note objects to populate a clip selected in Ableton Live via Max4Live\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n */\nexports.max = function (notes, liveClip) {\n    if (liveClip === void 0) { liveClip = 'live_set view highlighted_clip_slot clip'; }\n    var liveObject = new LiveAPI(liveClip);\n    var totalLength = notes.reduce(function (a, b) {\n        return a + b.length;\n    }, 0);\n    liveObject.set('loop_end', totalLength / 512);\n    liveObject.call('remove_notes', 0, 1, 258, 127);\n    liveObject.call('set_notes');\n    var noteCount = notes.reduce(function (a, b) {\n        return (a = a + (b.note ? b.note.length : 0));\n    }, 0);\n    liveObject.call('notes', noteCount);\n    var cursor = 0;\n    notes.forEach(function (noteObj) {\n        if (noteObj.note) {\n            noteObj.note.forEach(function (n) {\n                liveObject.call('note', jsmidgen_1.Util.midiPitchFromNote(n), cursor.toFixed(2).toString(), (noteObj.length / 512).toFixed(2).toString(), noteObj.level || 100, 0);\n            });\n            cursor = cursor + noteObj.length / 512;\n        }\n        else {\n            cursor = cursor + noteObj.length / 512;\n        }\n    });\n    liveObject.call('done');\n};\n"],"sourceRoot":""}